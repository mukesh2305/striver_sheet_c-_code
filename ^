#include <bits/stdc++.h>
using namespace std;

/////////////////////////////////////////////////
void init_code() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

//////////////////////////////////////////////////////////

//  1 => // Flood fill Algorithm
//  ref : https://practice.geeksforgeeks.org/problems/flood-fill-algorithm1856/1

// 2 => 733. Flood Fill =>  leetcode

////////////////////////////////////////////////
// Undirected Graph Representations using Adjacency Matrix

void solve_graph_adjacency_matrix() { // this is very costly operation
	int n , m;
	cin >> n >> m;
	// adjacency matrix for undirected graph
	// time complexity: O(n)
	// space complexity : O(n ^ n)
	int adj[n + 1][n  + 1];

	// assign 0 to all first
	for (int i = 0; i < n + 1; i++)
		for (int j = 0; j < n + 1; j++)
			adj[i][j] = 0;

	for (int i = 0; i < m; i++) {
		int u, v;
		cin >> u >> v;
		adj[u][v] = 1; // 1 is weight of edge
		adj[v][u] = 1; // this statement will be removed in case of directed graph
	}

	for (int i = 0; i < n + 1; i++) {
		for (int j = 0; j < n + 1; j++) cout << adj[i][j] << " ";
		cout << endl;
	}
}

void solve_graph_adjacency_list() {
	// time complexity: O(n)
	// space complexity : O(2 * m(edges))
	// we are creating array of 6 size;

	// in directed graph space complexity => O(m (edges)) // we are not consuming 2 edgs

	int n , m ;
	cin >> n >>  m;

	vector<int> adj[n + 1]; // adjacency list

	for (int i = 0; i < m ; i++) {
		int u , v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u); // this statement will be removed in case of directed graph
	}

// print
	for (int i = 0; i < n + 1; i++) {
		cout << "\n Adjacency list of vertex " << i
		     << "\n head ";
		for (auto x : adj[i]) cout << x << " ";
		cout << endl;
	}
}

void solve_graph_adjacency_list_with_weight() {
	int n , m ;
	cin >> n >>  m;

	vector<pair<int, int>> adj[n + 1]; // adjacency list

	for (int i = 0; i < m ; i++) {
		int u , v, w;
		cin >> u >> v >> w;
		adj[u].push_back({v, w});
		adj[v].push_back({u, w}); // this statement will be removed in case of directed graph
	}
}
/////////////////////////////////////////////////////
// G-4. What are Connected Components ?
///////////////////////////////////////////////////////////////////
// G-5. Breadth-First Search (BFS) | C++
// Function to return Breath First Traversal of given graph.
// TC O(N) + O(2E)
vector<int> bfsOfGraph(int V, vector<int> adj[]) {
	// V vertices/Node
	int vis[V] = {0}; // 0 based graph
	vis[0]  = 1;
	queue<int> q;
	q.push(0);

	vector<int> bfs;
	while (!q.empty()) {
		int node = q.front();
		q.pop();
		bfs.push_back(node);

		for (auto it : adj[node]) { // this will run O(2E) edges
			if (!vis[it]) {
				vis[it] = 1;
				q.push(it);
			}
		}
	}
	return bfs;
}

void addEdge_bfs(vector<int> adj[], int u, int v) {
	adj[u].push_back(v);
	adj[v].push_back(u);
}

void printAns_bfs(vector<int> &ans) {
	for (int i = 0; i < (int)ans.size(); i++)
		cout << ans[i] << " ";
	cout << endl;
}
void solve_bfsOfGraph() {
	vector<int> adj[6];

	addEdge_bfs(adj, 0, 1);
	addEdge_bfs(adj, 1, 2);
	addEdge_bfs(adj, 1, 3);
	addEdge_bfs(adj, 0, 4);

	vector<int> ans = bfsOfGraph(5, adj); // 5 is total nodes => 0 1 2 3 4 // start from 0
	printAns_bfs(ans);
}

///////////////////////////////////////////////////////////////////////////////////////////
// G-6. Depth-First Search (DFS) | C++

// SC O(N) + O(N) + O(N)  = O(N)
// TC O(N) + O(2E) // time complexity for undirected graph
// TC O(N) + O(E) // time complexity for directed graph
void dfs(int node, vector<int> adj[], int vis[], vector<int> &ls) {
	vis[node] = 1;
	ls.push_back(node);

	// traverse all its neighbours
	for (auto it : adj[node]) {
		if (!vis[it])
			dfs(it, adj, vis, ls);
	}
}
vector<int> dfsOfGraph(int V, vector<int> adj[]) {
	int vis[V] = {0};
	int start = 0; // 0 based indexing

	// create list to store dfs
	vector<int> ls;

	// call dfs for starting node
	dfs(start, adj, vis, ls);
	return ls;
}
void addEdge_dfs(vector<int> adj[], int u, int v) {
	adj[u].push_back(v);
	adj[v].push_back(u);
}

void printAns_dfs(vector<int> &ans) {
	for (int i = 0; i < (int)ans.size(); i++)
		cout << ans[i] << " ";
	cout << endl;
}
void solve_dfsOfGraph() {
	vector<int> adj[6];

	addEdge_dfs(adj, 0, 2);
	addEdge_dfs(adj, 2, 4);
	addEdge_dfs(adj, 0, 1);
	addEdge_dfs(adj, 0, 3);

	vector<int> ans = dfsOfGraph(5, adj); // 5 is total nodes => 0 1 2 3 4 // start from 0
	printAns_dfs(ans);
}

/////////////////////////////////////////////////////////////////////////////////////
// G-7. Number of Provinces | C++
// Number of Provinces
// link => https://practice.geeksforgeeks.org/problems/number-of-provinces/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=number_of_provinces

void dfs_for_province(int node, int vis[], vector<int> adjLs[]) {
	vis[node] = 1;

	for (auto it : adjLs[node])
		if (!vis[it])
			dfs_for_province(it, vis, adjLs);
}

// SC => O(N){VIS array} + O(N){recursion stack space}
// TC => O(N) + O(V + 2 * E) // nearly O(N) time complexity // V -> vertices/node  E -> edge
int numberOfProvince(vector<vector<int>> adj, int V) {
	// convert adj matrix  into adj list

	vector<int> adjLs[V];

	for (int i = 0; i < V; i++) {
		for (int j = 0; j < V; j++) {
			if (adj[i][j] == 1 && i != j) {
				// cout << i << " " << j <<  endl;
				adjLs[i].push_back(j);
				adjLs[j].push_back(i);
			}
		}
	}

	// cout << "ennnnnnnnnn" << endl << endl;


	// cout << " this ";
	// for (int i = 0; i < V; i++) {
	// 	cout << endl <<  "start " << i << " -> ";
	// 	for (auto it : adjLs[i] ) cout << it << " ";

	// }
	// cout << " end" << endl;

	int vis[V] = {0};
	int cnt = 0;

	for (int  i = 0; i < V; i++) {
		if (vis[i] == 0) {
			cnt++;
			dfs_for_province(i, vis, adjLs);
		}
	}
	return cnt;
}

void solve_numberOfProvince() {
	vector<vector<int>> adj = {
		{1, 0, 1},
		{0, 1, 0},
		{1, 0, 1}
	};

	int V = 3;
	cout << numberOfProvince(adj, V);
}

//////////////////////////////////////////////////////////////////////////////
// G-8. Number of Islands | Number of Connected Components in Matrix | C++
//https://practice.geeksforgeeks.org/problems/find-the-number-of-islands/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=find_the_number_of_islands
// 	TC O(N^2)
// 	SC O(N^2)
void dfs_numsIslands(int row, int col, vector<vector<int>> &vis, vector<vector<char>> &grid, int n, int m) {
	vis[row][col] = 1;
	queue<pair<int, int>> q;
	q.push({row, col});

	while (!q.empty()) {
		int row = q.front().first;
		int col = q.front().second;
		q.pop();

		// visit all the in the all the 8 direction
		for (int deltarow = -1; deltarow <= 1; deltarow++) {
			for (int deltacol = -1; deltacol <= 1; deltacol++) {
				int nrow = row + deltarow; // neibhghour row => all 8 direction
				int ncol = col + deltacol; // neibhghour col => all 8 direction
				if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == '1' && !vis[nrow][ncol]) {
					vis[nrow][ncol] = 1;
					q.push({nrow, ncol});
				}
			}
		}
	}
}
int numIslands(vector<vector<char>> &grid) {
	int n = grid.size();
	int m = grid[0].size();
	vector<vector<int>> vis(n , vector<int> (m , 0));

	int cnt = 0;
	for (int row = 0; row < n ; row++) {
		for (int col = 0; col < m ; col ++) {
			if (!vis[row][col] && grid[row][col] == '1') {
				cnt++;
				dfs_numsIslands(row, col, vis, grid, n , m);
			}
		}
	}
	return cnt;
}
void solve_numIslands() {
	vector<vector<char>> grid = {{'0', '1'}, {'1', '0'}, {'1', '1'}, {'1', '0'}};
	cout << numIslands(grid);
}

///////////////////////////////////////////////////////////////////////
// G-9. Flood Fill Algorithm | C++
//link =>  https://practice.geeksforgeeks.org/problems/flood-fill-algorithm1856/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=flood-fill-algorithm

void dfs_floodFill(int row, int col, vector<vector<int>> &image, vector<vector<int>> &ans,
                   int iniColor, int newColor, int deltaRow[], int deltaCol[]) {

	ans[row][col] = newColor;
	int n = image.size();
	int m = image[0].size();
	for (int i = 0; i < 4; i++) {
		int nrow = row + deltaRow[i];
		int ncol = col + deltaCol[i];
		if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
		        image[nrow][ncol] == iniColor && ans[nrow][ncol] != newColor) {
			dfs_floodFill(nrow, ncol, image, ans, iniColor, newColor, deltaRow , deltaCol);
		}
	}
}
vector<vector<int>> floodFill(vector<vector<int>> &image, int sr, int sc, int newColor) {
	int iniColor = image[sr][sc];
	vector<vector<int>> ans = image;
	int deltaRow[] = { -1, 0, +1, 0};
	int deltaCol[] = {0, +1, 0, -1};
	dfs_floodFill(sr, sc, image, ans, iniColor, newColor, deltaRow, deltaCol);
	return ans;
}
void solve_floodFill() {
	vector<vector<int>> image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
	int sr = 1, sc = 1, newColor = 2;
	for (auto i : floodFill(image, sr, sc, newColor)) {
		for (auto x : i) cout << x << " ";
		cout << endl;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////
// G-10. Rotten Oranges | C++
// we are required minimum time , so it goes in the same time all for direction so we are using BFS algo
// link => https://practice.geeksforgeeks.org/problems/rotten-oranges2536/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=rotten_oranges

// TC O(N * M)
// SC O(N * M)

int orangeRotting(vector<vector<int>> &grid) {
	int n = grid.size();
	int m = grid[0].size();

	// {{row, col}, time}
	queue<pair<pair<int, int>, int>> q;
	int vis[n][m];
	int cntFresh = 0; // check how many fresh oranges in the grid
	for (int i = 0; i < n ; i++) {
		for (int j = 0; j < m ; j++) {
			if (grid[i][j] == 2) {
				q.push({{i, j}, 0});
				vis[i][j] = 2;
			} else {
				vis[i][j] = 0;
			}

			if (grid[i][j] == 1) cntFresh++;
		}
	}

	int cnt = 0; // check how many fresh oranges are rotten
	int mxTime = 0;
	int deltaRow[] = { -1, 0, +1, 0};
	int deltaCol[] = {0, +1, 0, -1};

	while (!q.empty()) {
		int row = q.front().first.first;
		int col = q.front().first.second;
		int time = q.front().second;
		q.pop();

		mxTime = max(mxTime, time);
		for (int i = 0; i < 4; i++) {
			int nrow = row + deltaRow[i];
			int ncol = col + deltaCol[i];
			if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < n && vis[nrow][ncol] != 2 && grid[nrow][ncol] == 1) {
				q.push({{nrow, ncol}, time + 1});
				vis[nrow][ncol] = 2;
				cnt++;
			}
		}
	}

	if (cnt != cntFresh) return -1; // if any fresh is remaning in the grid to rotten then return -1
	return mxTime;
}
void solve_orangeRotting() {
	vector<vector<int>> grid = {{0, 1, 2}, {0, 1, 2}, {2, 1, 1}};
	cout << orangeRotting(grid);
}

////////////////////////////////////////////////////////////////////////////////
// G-11. Detect a Cycle in an Undirected Graph using BFS | C++

// TC O(N + 2E) + O(N)
// TC O(N)

bool detectBFS(int src, vector<int> adj[], int vis[]) {
	vis[src] = 1;

	// {src, parent} 1 -> 2 // 1 = parent and  2 = src
	queue<pair<int, int>> q;
	q.push({src, -1}); // parent is -1 for first node

	while (!q.empty()) {
		int node = q.front().first;
		int parent = q.front().second;
		q.pop();

		for (auto adjNode : adj[node]) {
			if (!vis[adjNode]) {
				vis[adjNode] = 1;
				q.push({adjNode, node});
			} else {
				// if adjacent node is visited and is not it's own parent node
				if (parent != adjNode) {
					// yes it is a cycle
					return true;
				}
			}
		}
	}
	return false;

}
bool isCycleBFS(int V, vector<int> adj[]) {
	int vis[V] = {0};

	for (int i = 0; i < V; i++) {
		if (!vis[i]) {
			if (detectBFS(i, adj, vis)) return true;
		}
	}
	return false;
}
void solve_isCycle_BFS() {
	int V = 5;
	// int E = 5;
	vector<int> adj[] = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}};
	bool ans = isCycleBFS(V, adj);
	if (ans)
		cout << "1\n";
	else
		cout << "0\n";// } Driver Code Ends
}

////////////////////////////////////////////////////////////////////////////////
// G-12. Detect a Cycle in an Undirected Graph using DFS | C++
bool detectDFS(int src, int parent, vector<int> adj[], int vis[]) {
	vis[src] = 1;

	for (auto adjNode : adj[src]) {
		if (!vis[adjNode]) {
			if (detectDFS(adjNode, src, adj, vis) == true)
				return true;
		} else {
			if (parent != adjNode) return true;
		}
	}
	return false;
}
bool isCycleDFS(int V, vector<int> adj[]) {
	int vis[V] = {0};
	for (int i = 0; i < V; i++) {
		if (!vis[i]) {
			if (detectDFS(i, -1, adj, vis)) return true;
		}
	}
	return false;
}
void solve_isCycle_DFS() {
	int V = 5;
	// int E = 5
	vector<int> adj[] = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}};
	bool ans = isCycleDFS(V, adj);
	if (ans)
		cout << "1\n";
	else
		cout << "0\n";// } Driver Code Ends
}

////////////////////////////////////////////////////////////////////////
// G-13. Distance of nearest cell having 1 | 0/1 Matrix

vector<vector<int>> nearest(vector<vector<int>> &grid) {
	int n = grid.size();
	int m = grid[0].size();

	int vis[n][m];
	vector<vector<int>> dis(n, vector<int> (m , 0));

	// {{row, col}, steps}
	queue<pair<pair<int, int>, int>> q;
	for (int i = 0; i < n ; i++) {
		for (int j = 0; j < m ; j++) {
			if (grid[i][j] == 1) {
				vis[i][j] = 1;
				q.push({{i, j}, 0});
			}  else {
				vis[i][j] = 0;
			}
		}
	}

	int deltaRow[] = { -1, 0, +1, 0};
	int deltaCol[] = { 0, +1, 0, -1};
	while (!q.empty()) {
		int row = q.front().first.first;
		int col = q.front().first.second;
		int steps = q.front().second;
		q.pop();

		dis[row][col] = steps;

		for (int i = 0; i < 4; i++) {
			int nrow = row + deltaRow[i];
			int ncol = col + deltaCol[i];
			if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && vis[nrow][ncol] == 0 && grid[nrow][ncol] == 0) {
				vis[nrow][ncol] = 1;
				q.push({{nrow, ncol}, steps + 1});
			}
		}
	}
	return dis;
}
void solve_nearest() {
	vector<vector<int>> grid = {{0, 1, 1, 0}, {1, 1, 0, 0}, {0, 0, 1, 1}};
	for (auto it : nearest(grid)) {
		for (auto x : it) cout << x << " ";
		cout << endl;
	}
}

/////////////////////////////////////////////////////////////////////////////
// G-14. Surrounded Regions | Replace O's with X's | C++
// link => https://practice.geeksforgeeks.org/problems/replace-os-with-xs0052/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=replace-os-with-xs
// TC O(N) + O(N * M) * 4
// SC O(N * M)

void dfs_fill(int row, int col, vector<vector<int>> &vis, vector<vector<char>> &mat, int deltarow[], int deltacol[]) {
	vis[row][col] = 1;
	int n = mat.size();
	int m = mat[0].size();

	for (int i = 0; i < 4 ; i++) {
		int nrow = row + deltarow[i];
		int ncol = col + deltacol[i];
		if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && !vis[nrow][ncol] && mat[nrow][ncol] == 'O') {
			dfs_fill(nrow, ncol, vis, mat, deltarow, deltacol);
		}
	}
}
vector<vector<char>> fill(int n , int m , vector<vector<char>> &mat) {
	vector<vector<int>> vis(n , vector<int> (m , 0));
	int deltarow[] = { -1, 0, +1, 0};
	int deltacol[] = {0, +1, 0, -1};
// 1 : mark first last row and col who containt O and connected O to vis so we cannot convert that to X
	// traverse first row and last row
	for (int j = 0; j < m; j++) {

		// first row
		if (!vis[0][j] && mat[0][j] == 'O') {
			dfs_fill(0, j, vis, mat, deltarow, deltacol);
		}

		// last row
		if (!vis[n - 1][j] && mat[n - 1][j] == 'O') {
			dfs_fill(n - 1, j, vis, mat, deltarow, deltacol);
		}
	}

	// traverse first col and last col
	for (int i = 0; i < n; i++) {

		// first col
		if (!vis[i][0] && mat[i][0] == 'O') {
			dfs_fill(i, 0, vis, mat, deltarow, deltacol);
		}

		// last col
		if (!vis[i][m - 1] && mat[i][m - 1] == 'O') {
			dfs_fill(i, m - 1, vis, mat, deltarow, deltacol);
		}
	}

// 2 : mark all not visited O into X
	for (int i = 0; i < n ; i++) {
		for (int j = 0; j < m ; j++) {
			if (!vis[i][j] && mat[i][j] == 'O') {
				vis[i][j] = 1;
				mat[i][j] = 'X';
			}
		}
	}
	return mat ;
}
void solve_fill() {
	int n = 5, m = 4;
	vector<vector<char>> mat = {
		{'X', 'X', 'X', 'X'},
		{'X', 'O', 'X', 'X'},
		{'X', 'O', 'O', 'X'},
		{'X', 'O', 'X', 'X'},
		{'X', 'X', 'O', 'O'}
	};
	for (auto it : fill(n, m , mat)) {
		for (auto x : it) cout << x << " ";
		cout << endl;
	}
}

///////////////////////////////////////////////////////////
// G-15. Number of Enclaves | Multi-source BFS | C++
// link => https://practice.geeksforgeeks.org/problems/number-of-enclaves/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=number-of-enclaves
int numberOfEnclaves(vector<vector<int>> &grid) {
	// {row , col}
	queue<pair<int, int>> q;
	int n = grid.size();
	int m = grid[0].size();

	int vis[n][m] = {0};
// 1 : mark first last row and col who containt O and connected O to vis so we cannot convert that to X

	for (int i = 0; i < n ; i++) {
		for (int j = 0; j < m ; j++) {
			// first and last row and col
			if (i == 0 || j == 0 || i == n - 1 || j == m - 1) {
				if (grid[i][j] == 1) {
					vis[i][j] = 1;
					q.push({i, j});
				}
			}
		}
	}

	int deltarow[] = { -1, 0, +1, 0};
	int deltacol[] = {0, +1, 0, -1};
	while (!q.empty()) {
		int row = q.front().first;
		int col = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nrow = row + deltarow[i];
			int ncol = col + deltacol[i];
			if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && !vis[nrow][ncol] && grid[nrow][ncol] == 1) {
				vis[nrow][nrow] = 1;
				q.push({nrow, ncol});
			}
		}
	}

	int cnt = 0;
	for (int i = 0; i < n ; i++) {
		for (int j = 0; j < m ; j++) {
			if (!vis[i][j] && grid[i][j] == 1) cnt++;
		}
	}
	return cnt;
}
void solve_numberOfEnclaves() {
	vector<vector<int>> grid = {
		{0, 0, 0, 0},
		{1, 0, 1, 0},
		{0, 1, 1, 0},
		{0, 0, 0, 0}
	};
	cout << numberOfEnclaves(grid);
}

//////////////////////////////////////////////////////////////////////////////////////
// G-16. Number of Distinct Islands | Constructive Thinking + DFS | C++
// link => https://practice.geeksforgeeks.org/problems/number-of-distinct-islands/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=number-of-distinct-islands
// TC => O(n * m * log(n * m)   + (n * m  * 4))
// SC => O(n * m)
void dfs_count_dist_islands(int row, int col, vector<vector<int>> &vis, vector<vector<int>> &grid, vector<pair<int, int>> &vec, int row0, int col0 ) {
	// row0 and col0 are the intial(bas) points for every islands
	vis[row][col] = 1;
	vec.push_back({row - row0, col - col0});

	int n = grid.size();
	int m = grid[0].size();

	int deltarow[] = { -1, 0, +1, 0};
	int deltacol[] = {0, +1, 0, -1};

	for (int i = 0; i < 4; i++) {
		int nrow = row + deltarow[i];
		int ncol = col + deltacol[i];
		if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && !vis[nrow][ncol] && grid[nrow][ncol] == 1) {
			dfs_count_dist_islands(nrow, ncol, vis, grid, vec, row0, col0);
		}
	}

}
int countDistinctIslands(vector<vector<int>> &grid) {
	int n = grid.size();
	int m = grid[0].size();

	set<vector<pair<int, int>>> st;
	vector<vector<int>> vis(n, vector<int> (m , 0));
	for (int i = 0; i < n ; i++) {
		for (int j = 0; j < m; j++) {
			if (!vis[i][j] && grid[i][j] == 1) {
				vector<pair<int, int>> vec;
				dfs_count_dist_islands(i, j, vis, grid, vec, i, j);
				st.insert(vec);
			}
		}
	}

	return st.size();
}
void solve_countDistinctIslands() {
	vector<vector<int>> grid = {
		{1, 1, 0, 0, 0},
		{1, 1, 0, 0, 0},
		{0, 0, 0, 1, 1},
		{0, 0, 0, 1, 1}
	};
	cout << countDistinctIslands(grid);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
// G-17. Bipartite Graph | BFS
// link => https://practice.geeksforgeeks.org/problems/bipartite-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=bipartite-graph

// linear graph with no cycle are always Biaprtite grph
// any graph with even cycle length can also be bipartite graph
//- any graph with odd cycle length can not be bipartite
bool check_bipartite_bfs(int start, int V, vector<int> adj[], int color[]) {
	queue<int> q;
	q.push(start);
	color[start] = 0; // 0 and 1 are color we are starting with 0

	while (!q.empty()) {
		int node = q.front();
		q.pop();

		for (auto adjNode : adj[node]) {
			if (color[adjNode] == -1) {
				color[adjNode] = !color[node]; // color with opposite node
				q.push(adjNode);
			} else if (color[adjNode] == color[node]) {
				return false;
			}
		}
	}

	return true;
}
// same as BFS Time complexity it takes
bool isBipartite_bfs(int V, vector<int> adj[]) {
	int color[V];
	for (int i = 0; i < V; i++) color[i] = -1;

	// this for loop if for multiple components
	for (int i = 0; i < V; i++) {
		if (color[i] == -1) {
			if (check_bipartite_bfs(i, V, adj, color) == false)
				return false;
		}
	}
	return true;
}
void solve_isBipartite_bfs() {
	int V, E;
	cin >> V >> E;

	vector<int> adj[V];
	for (int i = 0; i < E; i++) {
		int u, v ;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	bool ans = isBipartite_bfs(V, adj);
	if (ans) cout << "1\n";
	else cout << "0\n";
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
// G-17. Bipartite Graph | DFS
// link => https://practice.geeksforgeeks.org/problems/bipartite-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=bipartite-graph

// linear graph with no cycle are always Biaprtite grph
// any graph with even cycle length can also be bipartite graph
//- any graph with odd cycle length can not be bipartite

bool check_bipartite_dfs(int node, int col, vector<int> adj[], int color[]) {
	color[node] = col;

	for (auto adjNode : adj[node]) {
		if (color[adjNode] == -1) {
			if (check_bipartite_dfs(adjNode, !col, adj, color) == false)
				return false;
		} else {
			if (color[adjNode] == col)
				return false;
		}
	}

	return true;
}

// same as DFS Time complexity it takes
bool isBipartite_dfs(int V, vector<int> adj[]) {
	int color[V];
	for (int i = 0; i < V; i++) color[i] = -1;

	// this for loop if for multiple components
	for (int i = 0; i < V; i++) {
		if (color[i] == -1) {
			if (check_bipartite_dfs(i, 0, adj, color) == false)
				return false;
		}
	}
	return true;
}
void solve_isBipartite_dfs() {
	int V, E;
	cin >> V >> E;

	vector<int> adj[V];
	for (int i = 0; i < E; i++) {
		int u, v ;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	bool ans = isBipartite_dfs(V, adj);
	if (ans) cout << "1\n";
	else cout << "0\n";
}

///////////////////////////////////////////////////////////////////////////////////
// G-19. Detect cycle in a directed graph using DFS
bool dfs_isCyclic_directed(int node, int vis[], int pathVis[], vector<int> adj[]) {
	vis[node] = 1;
	pathVis[node] = 1;

	// traverse for adjNodes
	for (auto it : adj[node]) {
		// when the node is not visited
		if (!vis[it]) {
			if (dfs_isCyclic_directed(it, vis, pathVis, adj) == true)
				return true;
		}
		// if the node has been previously visited
		// but it has to be visited on the same path
		else if (pathVis[it] == 1)
			return true;
	}

	pathVis[node] = 0;
	return false;
}
bool isCyclic_directed(int V, vector<int> adj[]) {
	int vis[V] = {0};
	int pathVis[V] = {0};

	for (int i = 0; i < V; i++) {
		if (!vis[i]) {
			if (dfs_isCyclic_directed(i, vis, pathVis, adj) == true)
				return true;
		}
	}
	return false;
}
void solve_isCyclic_directed() {
	int V, E;
	cin >> V >> E;

	vector<int> adj[V];

	for (int i = 0; i < V; i++) {
		int u , v;
		cin >> u >> v;
		adj[u].push_back(v);
	}

	cout << "output : " <<  isCyclic_directed(V, adj);
}

//////////////////////////////////////////////////////////////////////////////////////////
// G-20. Find Eventual Safe States - DFS
// directed graph
// 0 based graph => meand node start with 0 to V - 1
// Terminal node = outgoing edge are 0
// safe node = all the path goes to Terminal node

// any node which part of the cycle can and connect to cycle never be safe node
// any one who leades to cycle can never be a safe node

//////////////////// approach1 /////////////////////////////////////
bool dfs_eventualSafeNodes(int node, int vis[], int pathVis[], int check[], vector<int> adj[]) {
	vis[node] = 1;
	pathVis[node] = 1;
	check[node] = 0;

	// traverse for adjacent nodes
	for (auto it : adj[node]) {
		// when the node is not visited
		if (!vis[it]) {
			if (dfs_eventualSafeNodes(it, vis, pathVis, check, adj) == true) {
				check[node] = 0;
				return true;
			}
		}
		// if the node has been previously visited
		//  but it has to be visited on the same path
		else if (pathVis[it] == 1) {
			check[node] = 0;
			return true;
		}
	}

	check[node] = 1;
	pathVis[node] = 0;
	return false;
}
vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
	int vis[V] = {0};
	int pathVis[V] = {0};
	int check[V] = {0};
	vector<int> safeNodes;

	for (int i = 0; i < V; i++) {
		if (!vis[i]) {
			dfs_eventualSafeNodes(i, vis, pathVis, check , adj);
		}
	}

	for (int i = 0; i < V; i++) {
		if (check[i] == 1) safeNodes.push_back(i);
	}
	return safeNodes;
}

/////////////////////////// 2nd approach /////////////////////////////
bool dfs_eventualSafeNodes1(int node, int vis[], int pathVis[], int check[], vector<int> adj[]) {
	vis[node] = 1;
	pathVis[node] = 1;
	check[node] = 0;

	// traverse for adjacent nodes
	for (auto it : adj[node]) {
		// when the node is not visited
		if (!vis[it]) {
			if (dfs_eventualSafeNodes1(it, vis, pathVis, check, adj) == true) {
				// check[node] = 0;
				return true;
			}
		}
		// if the node has been previously visited
		//  but it has to be visited on the same path
		else if (pathVis[it] == 1) {
			// check[node] = 0;
			return true;
		}
	}

	check[node] = 1;
	pathVis[node] = 0;
	return false;
}
vector<int> eventualSafeNodes1(int V, vector<int> adj[]) {
	int vis[V] = {0};
	int pathVis[V] = {0};
	int check[V] = {0};
	vector<int> safeNodes;

	for (int i = 0; i < V; i++) {
		if (!vis[i]) {
			dfs_eventualSafeNodes1(i, vis, pathVis, check , adj);
		}
	}

	for (int i = 0; i < V; i++) {
		if (check[i] == 1) safeNodes.push_back(i);
	}
	return safeNodes;
}


/////////////////////////// 3nd approach //////////////////////////////////
bool dfs_eventualSafeNodes2(int node, int vis[], int pathVis[], vector<int> adj[]) {

	vis[node] = 1;
	pathVis[node] = 1;
	// check[node] = 0;
	// traverse for adjacent nodes
	for (auto it : adj[node]) {
		// when the node is not visited
		if (!vis[it]) {
			if (dfs_eventualSafeNodes2(it, vis, pathVis, adj) == true) {
				// check[node] = 0;
				return true;
			}
		}
		// if the node has been previously visited
		//  but it has to be visited on the same path
		else if (pathVis[it] == 1) {
			// // check[node] = 0;
			return true;
		}
	}

	// check[node] = 1;
	pathVis[node] = 0;
	return false;
}
vector<int> eventualSafeNodes2(int V, vector<int> adj[]) {
	int vis[V] = {0};
	int pathVis[V] = {0};
	// int check[V] = {0};
	vector<int> safeNodes;

	for (int i = 0; i < V; i++) {
		if (!vis[i]) {
			dfs_eventualSafeNodes2(i, vis, pathVis, adj);
		}
	}

	for (int i = 0; i < V; i++) {
		if (pathVis[i] == 0) safeNodes.push_back(i);
	}
	return safeNodes;
}

void solve_eventualSafeNodes() {
	int V, E;
	cin >> V >> E;

	vector<int> adj[V];
	// V => count of total number of verticis
	// E => count of total number of edges

	for (int i = 0; i < E; i++) {
		int u , v;
		cin >> u >> v;
		adj[u].push_back(v);
	}

	// for(auto it : eventualSafeNodes(V, adj))
	// 	cout << it << " ";

	// cout << endl ;
	// for(auto it : eventualSafeNodes1(V, adj))
	// 	cout << it << " ";

	cout << endl ;
	for (auto it : eventualSafeNodes2(V, adj))
		cout << it << " ";
}

/////////////////////////////////////////////////////////////////////////////////////////
// G-21. Topological Sort Algorithm | DFS
// it apply on any graph which directed acyclic graph(DAG) => any directed graph which does not have cycle
// Topological sorting : linear orddering of vertices such that if there is edge between u and v , u apperas before v
// 5 -> 0
// 4 -> 0
// 5 -> 2
// 2 -> 3
// 3 -> 1
// 4 -> 1
// 5 4 2 3 1 0 => this is topologycal sorting
// 4 5 2 3 1 0 => this is also valid topological sorting algo

// in cycle topologycal sorting is not possible
void dfs_topsort(int node, int vis[], stack<int> & st, vector<int> adj[]) {
	vis[node] = 1;

	for (auto it : adj[node]) {
		if (!vis[it])
			dfs_topsort(it, vis, st, adj);
	}

	st.push(node);
}
vector<int> topsort(int V, vector<int> adj[]) {
	int vis[V] = {0};
	stack<int> st;

	for (int i = 0; i < V; i++) {
		if (!vis[i])
			dfs_topsort(i, vis, st, adj);
	}


	vector<int> ans;
	while (!st.empty()) {
		ans.push_back(st.top());
		st.pop();
	}
	return ans;
}
void solve_topsort() {
	int V, E;
	cin >> V >> E;

	vector<int> adj[V];
	for (int i = 0; i < E; i++) {
		int u , v;
		cin >> u >> v;
		adj[u].push_back(v);
	}

	for (auto it : topsort(V, adj)) cout << it << " ";
	// this is vector that written by topsort // after this it will check by GeeksforGeeks and if it is topsort than it will return 1; if not than return 0;
}
int main() {
	init_code();
	// solve_graph_adjacency_matrix();
	// solve_graph_adjacency_list();
	// solve_bfsOfGraph();
	// solve_dfsOfGraph();
	// solve_numberOfProvince();
	// solve_numIslands();
	// solve_floodFill();
	// solve_orangeRotting();
	// solve_isCycle_BFS();
	// solve_isCycle_DFS();
	// solve_nearest();
	// solve_fill();
	// solve_numberOfEnclaves();
	// solve_countDistinctIslands();
	// solve_isBipartite_bfs();
	// solve_isBipartite_dfs();
	// solve_isCyclic_directed();
	// solve_eventualSafeNodes();
	solve_topsort();
}
