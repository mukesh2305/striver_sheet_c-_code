#include <bits/stdc++.h>
using namespace std;
// binary search
////////////////////////////////
// find Ele
int findEle(int arr[], int n, int x) {
	int l = 0, h = n - 1;
	while (l <= h) {
		int mid = l + (h - l) / 2;
		if (arr[mid] == x) return mid;

		else if (arr[mid] < x) l = mid + 1;

		else h = mid - 1;
	}
	return -1;
}

void solve_findEle() {
	int arr[] = {1, 2, 5, 7, 3};
	int x = 2;
	int n = sizeof(arr) / sizeof(arr[0]);
	cout << findEle(arr, n , x);
}

/////////////////////////////////////////////////////////
// Given array of duplicates
// find out first occurence of x
// with => ans
int firstOccurence(int arr[], int n , int x) {
	int l = 0, h = n - 1;
	int ans = -1;
	while (l <= h) {
		int mid = l + (h - l) / 2;
		// if element find , then go left to find first occurence of element
		if (arr[mid] == x) {
			ans = mid;
			h = mid - 1;
		}
		else if (arr[mid] < x) l = mid + 1;
		else h = mid - 1;
	}
	return ans;
}

// without ans => variable
int firstOccurence1(int arr[], int n , int x) {
	int l = 0, h = n - 1;
	while (l <= h) {
		int mid = l + (h - l) / 2;
		// if element find , then go left to find first occurence of element
		if (arr[mid] == x) {
			h = mid - 1;
		}
		else if (arr[mid] < x) l = mid + 1;
		else h = mid - 1;
	}
	if (arr[l] != x) return -1;
	return l;
}

void solve_firstOccurence() {
	int arr[] = {1, 2, 2, 2, 3, 4, 4, 4, 5};
	int x = 6;
	int n = sizeof(arr) / sizeof(arr[0]);
	// cout << firstOccurence(arr, n , x);
	cout << firstOccurence1(arr, n , x);
}

////////////////////////////////////////////////////////
// Given array of duplicates
// find out last occurence of x
// with => ans variable
int lastOccurence(int arr[], int n, int x) {
	int l = 0, h = n - 1;
	int ans = -1;
	while (l <= h) {
		int mid = l + (h - l) / 2;
		if (arr[mid] == x) {
			ans = mid;
			l = mid + 1;
		}
		else if (arr[mid] < x) l = mid + 1;
		else h = mid - 1;
	}
	return ans;
}

// without => ans variable
int lastOccurence1(int arr[], int n, int x) {
	int l = 0, h = n - 1;
	while (l <= h) {
		int mid = l + (h - l) / 2;
		if (arr[mid] == x) {
			l = mid + 1;
		}
		else if (arr[mid] < x) l = mid + 1;
		else h = mid - 1;
	}
	if (arr[h] != x) return -1;
	return h;
}
void solve_lastOccurence() {
	int arr[] = {1, 2, 2, 2, 3, 4, 4, 4, 5};
	int x = 2;
	int n = sizeof(arr) / sizeof(arr[0]);
	// cout << lastOccurence(arr, n , x);
	cout << lastOccurence1(arr, n , x);
}


///////////////////////////////////////////////////////////////////
// lower bound of x
// first ele that is >= x (is lower bound of x)
// arr[] = {1, 3, 5, 7, 9, 10} x = 7 lowBound = 7
// arr[] = {1, 3, 5, 7, 9, 10} x = 6 lowBound = 7
// arr[] = {1, 3, 5, 7, 9, 10} x = 4 lowBound = 5
// arr[] = {1, 3, 5, 7, 9, 10} x = 11 lowBound = -1(not found)
// inbuilt method
int lowerBound(int arr[], int n, int x) {
	// give you the  index
	// inbuilt method
	int lb = lower_bound(arr + 0, arr + n, x) - arr;
	return lb;
}

int lowerBound1(int arr[], int n , int x) {
	int l = 0, h = n - 1;
	int ans = -1;
	while (l <= h) {
		int mid = l + (h - l) / 2;
		if (arr[mid] >= x) {
			ans = mid;
			h = mid - 1;
		}
		else if (arr[mid] < x)
			l = mid + 1;

	}
	return ans;
}

void solve_lowerBound() {
	int arr[] = {1, 3, 4, 6, 8, 8, 10, 12, 13};
	int n = sizeof(arr) / sizeof(arr[0]);
	int x = 7;
	// cout << lowerBound(arr, n , x);
	cout << lowerBound1(arr, n , x);
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
// upper bound of x
// first ele that is > x (is lower bound of x)
// arr[] = {1, 3, 5, 7, 9, 10} x = 7 upperBound = 9
// arr[] = {1, 3, 5, 7, 9, 10} x = 6 upperBound = 7
// arr[] = {1, 3, 5, 7, 9, 10} x = 4 upperBound = 5
// arr[] = {1, 3, 5, 7, 9, 10} x = 11 upperBound = -1(not found)
int upperBound(int arr[], int n, int x) {
	// first ele that is > x (is lower bound of x)
	int ub = upper_bound(arr + 0, arr + n, x) - arr;
	return ub;
}
int upperBound1(int arr[], int n, int x) {
	int l = 0, h = n - 1;
	int ans = -1;
	while (l <= h) {
		int mid = l + (h - l) / 2;
		if (arr[mid] <=  x)
			l = mid + 1;
		else if (arr[mid] > x) {
			ans = mid;
			h = mid - 1;
		}
	}
	return ans;
}

int solve_upperBound() {
	int arr[] = {1, 3, 4, 6, 8, 8, 10, 12, 13};
	int n = sizeof(arr) / sizeof(arr[0]);
	int x = 8;
	cout << upperBound(arr, n , x);
	// cout << upperBound1(arr, n , x);
}

//////////////////////////////////////////////////////
// Given x, find number of occurence of x
int freqOfEle(int arr[], int n, int x) {
	// 1 3 5 7 7 7 10
	// 1st way
	// int ans = lastOccurence(arr, n , x) - firstOccurence(arr, n ,  x) + 1;
	// return ans;

	// 2way
	int lb = lower_bound(arr + 0, arr + n, x) - arr;
	int ub = upper_bound(arr + 0, arr + n, x) - arr;
	if (arr[lb] != x) return 0;
	return ub - lb;
}

void solve_freqOfEle() {
	int arr[] = {1, 3, 5, 7, 7, 7, 10};
	int n = sizeof(arr) / sizeof(arr[0]);
	int x = 7;
	cout << freqOfEle(arr, n , x);
}
//////////////////////////////////////////////
// Given Number n = 26 wanted to find integer sqrt(26) = 5
// i = 1 to i = 26
int sqroot(int n) {
	int l = 1, h = n;
	int ans = 1;
	while (l <= h) {
		int mid = l + (h - l) / 2;
		if (mid * mid <= n) {
			ans = mid;
			l = mid + 1;
		}
		else h = mid - 1;
	}
	return ans;
}

void solve_sqroot() {
	int n = 65;
	cout << sqroot(n);
}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
///////////////////////////////////////////////////////////
// medium problem on leetcode
// 153. Find Minimum in Rotated Sorted Array
int findMin(vector<int>& nums) {
	int n = nums.size();
	int l = 0, h = n - 1;
	while (l <= h) {
		int mid = l + (h - l) / 2;
		if (nums[mid] < nums[h])
			h = mid;
		else l = mid + 1;
	}
	return nums[h]; // nums[l - 1]
}

int findMin1(vector<int>& nums) {
	int n = nums.size();
	int l = 0, h = n - 1;
	while (l < h) {
		int mid = l + (h - l) / 2;
		if (nums[mid] < nums[h])
			h = mid;
		else l = mid + 1;
	}
	return nums[l];
}

void solve_findMin() {
	vector<int> nums = { 7, 8, 9, 1, 2, 3, 4, 5, 6};
	// cout << findMin(nums);
	cout << findMin1(nums);
}

////////////////////////////////////////////////////////////
//154. Find Minimum in Rotated Sorted Array II
// they may containts DUPLICATES
int findMinII(vector<int>& nums) {
	int n = nums.size();
	int l = 0, h = n - 1;
	while (l < h) {
		int mid = l + (h - l) / 2;
		if (nums[mid] < nums[h])
			h = mid;
		else if(nums[mid] > nums[h])
			l = mid + 1;
		else h--;
	}
	return nums[l];
}
void solve_findMinII() {
	vector<int> nums = {2, 2, 2, 0, 1};
	cout << findMinII(nums);
}
int main() {
	// solve_findEle();
	// solve_DuplicateFirstFindEle();
	// solve_DuplicateLastFindEle();
	// solve_lowerBound() ;
	// solve_upperBound();
	// solve_freqOfEle();
	// solve_sqroot();

	// medium leetcode questions
	// solve_findMin() ;
	solve_findMinII();
}